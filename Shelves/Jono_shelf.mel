global proc shelf_Jono_shelf () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 32
        -enable 1
        -width 32
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create Locator" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Create Locator" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateLocator" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Polygon Sphere" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Polygon Sphere" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polySphere.png" 
        -image1 "polySphere.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreatePolygonSphere" 
        -sourceType "mel" 
        -doubleClickCommand "CreatePolygonSphereOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 32
        -enable 1
        -width 32
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Polygon Cube" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Polygon Cube" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyCube.png" 
        -image1 "polyCube.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreatePolygonCube" 
        -sourceType "mel" 
        -doubleClickCommand "CreatePolygonCubeOptions" 
        -commandRepeatable 1
        -flat 1
    ;
     separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 32
        -enable 1
        -width 32
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "aimer script"
         -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "aimer" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "aimer" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "aimConstraint.png" 
        -image1 "aimConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "aimer"
         -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import sys\n\nfrom PySide2 import QtCore\nfrom PySide2 import QtWidgets\nfrom PySide2 import QtGui\nfrom shiboken2 import wrapInstance\n\nimport maya.cmds as mc\nimport maya.mel as mel\nimport maya.OpenMayaUI as omui\nfrom maya.api import OpenMaya as om\n\ndef maya_main_window():\n    \"\"\"\n    Return the Maya main window widget as a Python self.object\n    \"\"\"\n    main_window_ptr = omui.MQtUtil.mainWindow()\n    if sys.version_info.major >= 3:\n        return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)\n    else:\n        return wrapInstance(long(main_window_ptr), QtWidgets.QWidget)\n\nclass NurbsPathDialog(QtWidgets.QDialog):\n\n    def __init__(self, parent=maya_main_window()):\n        super(NurbsPathDialog, self).__init__(parent)\n\n        self.setWindowTitle(\"Nurbs Path\")\n        self.setMaximumWidth(200)\n        self.setMaximumHeight(90)\n        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)\n\n        self.create_widgets()\n        self.create_layouts()\n        self.create_connections()\n\n\n    def create_widgets(self):\n\n        self.make_nurbs_btn = QtWidgets.QPushButton(\"Make Nurbs Curve\")\n        self.update_anim_btn = QtWidgets.QPushButton(\"Update Anim\")\n        self.smooth_nurbs_btn = QtWidgets.QPushButton(\"Smooth\")\n\n        #Dial\n        self.smooth_dial = QtWidgets.QDial()\n        self.smooth_dial.setNotchesVisible(True)\n        self.smooth_dial.setRange(01, 9)\n        self.smooth_dial.setValue(2)\n        self.smooth_dial.setFocusPolicy(QtCore.Qt.NoFocus)\n        self.dial_label = QtWidgets.QLabel(\"Smooth Value = 2\")\n\n\n    def create_layouts(self):\n\n        dial_layout = QtWidgets.QHBoxLayout()\n        dial_layout.addWidget(self.smooth_nurbs_btn)\n        dial_layout.addWidget(self.smooth_dial)\n        dial_layout.addWidget(self.dial_label)\n        dial_layout.setSpacing(11)\n\n        main_layout = QtWidgets.QVBoxLayout(self)\n        main_layout.addWidget(self.make_nurbs_btn)\n        main_layout.addLayout(dial_layout)\n        main_layout.addWidget(self.update_anim_btn)\n\n    def create_connections(self):\n        self.make_nurbs_btn.clicked.connect(self.make_nurbs)\n        self.update_anim_btn.clicked.connect(self.update_anim)\n        self.smooth_nurbs_btn.clicked.connect(self.smooth_nurbs_A)\n\n        self.smooth_dial.valueChanged.connect(lambda: self.dial_label.setText(\"Smooth Value = \" + str(self.smooth_dial.value())))\n\n\n    def make_nurbs(self):\n        positions = []\n        self.obj = mc.ls(sl=1)[0]\n\n        self.minTime = mc.playbackOptions(q=1, minTime=1)\n        self.maxTime = mc.playbackOptions(q=1, maxTime=1)\n\n        for frame in range(int(self.minTime), int(self.maxTime)):\n            # Get worldspace using end of .worldMatrix (last 4 values)\n            valueList = mc.getAttr((self.obj+'.worldMatrix'),time=(frame))\n\n            x = valueList[-4]\n            y = valueList[-3]\n            z = valueList[-2]\n            trans = [x, y, z]\n\n            positions.append(trans)\n\n        # Make Curve\n        name_no_namespace = self.obj.rpartition(\":\")[2]\n        curv_name = name_no_namespace + \"_curv\"\n\n        self.curv = mc.curve(name=curv_name, p=positions)\n\n        #Rename shape\n        shape = mc.listRelatives(self.curv, shapes=1)[0]\n        mc.rename(shape, \"{0}Shape\".format(curv_name))\n\n\n    def update_anim(self):\n        new_positions = []\n\n        #get CV count\n        CV_count = mc.getAttr(self.curv + '.cp', s=1)\n\n        for cv in range(CV_count):\n            cv_pos = mc.pointPosition('{0}.cv[{1}]'.format(self.curv, cv))\n\n            # Confusing Matrix maths o.o\n            target_iv = mc.getAttr(self.obj + \".worldInverseMatrix\")\n            target_local = mc.getAttr(self.obj + \".matrix\")\n\n            source_mat = om.MPoint(cv_pos)\n            tar_iv_mat = om.MMatrix(target_iv)\n            tar_loc_mat = om.MMatrix(target_local)\n\n            full_tar_mat = tar_iv_mat * tar_loc_mat\n            cv_pos_true = source_mat * full_tar_mat\n\n            #cv_pos = mc.pointPosition('{0}.cv[{1}]'.format(self.curv, cv))\n            new_positions.append(cv_pos_true)\n\n        for pos in range(CV_count):\n            time = pos + self.minTime\n            mc.setKeyframe(self.obj, at='translateX', value = new_positions[pos][0], time = time)\n            mc.setKeyframe(self.obj, at='translateY', value = new_positions[pos][1], time = time)\n            mc.setKeyframe(self.obj, at='translateZ', value = new_positions[pos][2], time = time)\n\n\n    def smooth_nurbs_A(self):\n        self.smooth_val = self.smooth_dial.value()\n        mel.eval(\"modifySelectedCurves smooth {0} 0;\".format(self.smooth_val))\n\n    def smooth_nurbs_B(self):\n        cvs = mc.ls(sl=1)[0]\n        curve = cvs.split('.')[0]\n\n        mc.smoothCurve(cvs, s=3, rpo=1)\n\n        mc.select(curve)\n        mc.selectMode(component=1)\n        mc.select(cvs)\n\n\nif __name__ == \"__main__\":\n\n    try:\n        nurbs_path.close() # pylint: disable=E0601\n        nurbs_path.deleteLater()\n    except:\n        pass\n\n    nurbs_path = NurbsPathDialog()\n    nurbs_path.show()" 
        -enableBackground 0-backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "nurbs smoother" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "nrb_smoo" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "attachCurves.png" 
        -image1 "attachCurves.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sys\n\nfrom PySide2 import QtCore\nfrom PySide2 import QtWidgets\nfrom PySide2 import QtGui\nfrom shiboken2 import wrapInstance\n\nimport maya.cmds as mc\nimport maya.mel as mel\nimport maya.OpenMayaUI as omui\nfrom maya.api import OpenMaya as om\n\ndef maya_main_window():\n    \"\"\"\n    Return the Maya main window widget as a Python self.object\n    \"\"\"\n    main_window_ptr = omui.MQtUtil.mainWindow()\n    if sys.version_info.major >= 3:\n        return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)\n    else:\n        return wrapInstance(long(main_window_ptr), QtWidgets.QWidget)\n\nclass NurbsPathDialog(QtWidgets.QDialog):\n\n    def __init__(self, parent=maya_main_window()):\n        super(NurbsPathDialog, self).__init__(parent)\n\n        self.setWindowTitle(\"Nurbs Path\")\n        self.setMaximumWidth(200)\n        self.setMaximumHeight(90)\n        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)\n\n        self.create_widgets()\n        self.create_layouts()\n        self.create_connections()\n\n\n    def create_widgets(self):\n\n        self.make_nurbs_btn = QtWidgets.QPushButton(\"Make Nurbs Curve\")\n        self.update_anim_btn = QtWidgets.QPushButton(\"Update Anim\")\n        self.smooth_nurbs_btn = QtWidgets.QPushButton(\"Smooth\")\n\n        #Dial\n        self.smooth_dial = QtWidgets.QDial()\n        self.smooth_dial.setNotchesVisible(True)\n        self.smooth_dial.setRange(01, 9)\n        self.smooth_dial.setValue(2)\n        self.smooth_dial.setFocusPolicy(QtCore.Qt.NoFocus)\n        self.dial_label = QtWidgets.QLabel(\"Smooth Value = 2\")\n\n\n    def create_layouts(self):\n\n        dial_layout = QtWidgets.QHBoxLayout()\n        dial_layout.addWidget(self.smooth_nurbs_btn)\n        dial_layout.addWidget(self.smooth_dial)\n        dial_layout.addWidget(self.dial_label)\n        dial_layout.setSpacing(11)\n\n        main_layout = QtWidgets.QVBoxLayout(self)\n        main_layout.addWidget(self.make_nurbs_btn)\n        main_layout.addLayout(dial_layout)\n        main_layout.addWidget(self.update_anim_btn)\n\n    def create_connections(self):\n        self.make_nurbs_btn.clicked.connect(self.make_nurbs)\n        self.update_anim_btn.clicked.connect(self.update_anim)\n        self.smooth_nurbs_btn.clicked.connect(self.smooth_nurbs_A)\n\n        self.smooth_dial.valueChanged.connect(lambda: self.dial_label.setText(\"Smooth Value = \" + str(self.smooth_dial.value())))\n\n\n    def make_nurbs(self):\n        positions = []\n        self.obj = mc.ls(sl=1)[0]\n\n        self.minTime = mc.playbackOptions(q=1, minTime=1)\n        self.maxTime = mc.playbackOptions(q=1, maxTime=1)\n\n        for frame in range(int(self.minTime), int(self.maxTime)):\n            # Get worldspace using end of .worldMatrix (last 4 values)\n            valueList = mc.getAttr((self.obj+'.worldMatrix'),time=(frame))\n\n            x = valueList[-4]\n            y = valueList[-3]\n            z = valueList[-2]\n            trans = [x, y, z]\n\n            positions.append(trans)\n\n        # Make Curve\n        name_no_namespace = self.obj.rpartition(\":\")[2]\n        curv_name = name_no_namespace + \"_curv\"\n\n        self.curv = mc.curve(name=curv_name, p=positions)\n\n        #Rename shape\n        shape = mc.listRelatives(self.curv, shapes=1)[0]\n        mc.rename(shape, \"{0}Shape\".format(curv_name))\n\n\n    def update_anim(self):\n        new_positions = []\n\n        #get CV count\n        CV_count = mc.getAttr(self.curv + '.cp', s=1)\n\n        for cv in range(CV_count):\n            cv_pos = mc.pointPosition('{0}.cv[{1}]'.format(self.curv, cv))\n\n            # Confusing Matrix maths o.o\n            target_iv = mc.getAttr(self.obj + \".worldInverseMatrix\")\n            target_local = mc.getAttr(self.obj + \".matrix\")\n\n            source_mat = om.MPoint(cv_pos)\n            tar_iv_mat = om.MMatrix(target_iv)\n            tar_loc_mat = om.MMatrix(target_local)\n\n            full_tar_mat = tar_iv_mat * tar_loc_mat\n            cv_pos_true = source_mat * full_tar_mat\n\n            #cv_pos = mc.pointPosition('{0}.cv[{1}]'.format(self.curv, cv))\n            new_positions.append(cv_pos_true)\n\n        for pos in range(CV_count):\n            time = pos + self.minTime\n            mc.setKeyframe(self.obj, at='translateX', value = new_positions[pos][0], time = time)\n            mc.setKeyframe(self.obj, at='translateY', value = new_positions[pos][1], time = time)\n            mc.setKeyframe(self.obj, at='translateZ', value = new_positions[pos][2], time = time)\n\n\n    def smooth_nurbs_A(self):\n        self.smooth_val = self.smooth_dial.value()\n        mel.eval(\"modifySelectedCurves smooth {0} 0;\".format(self.smooth_val))\n\n    def smooth_nurbs_B(self):\n        cvs = mc.ls(sl=1)[0]\n        curve = cvs.split('.')[0]\n\n        mc.smoothCurve(cvs, s=3, rpo=1)\n\n        mc.select(curve)\n        mc.selectMode(component=1)\n        mc.select(cvs)\n\n\nif __name__ == \"__main__\":\n\n    try:\n        nurbs_path.close() # pylint: disable=E0601\n        nurbs_path.deleteLater()\n    except:\n        pass\n\n    nurbs_path = NurbsPathDialog()\n    nurbs_path.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from My_Tools import fancy_copy\n\nui = fancy_copy.FancyCopyDialog()\nui.show()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "fancy copy" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "fancy" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyCopyUVSet.png" 
        -image1 "polyCopyUVSet.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from My_Tools import fancy_copy2\n\nui = fancy_copy2.FancyCopyDialog()\nui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as mc\n\n\ndef locTool():\n    selObj = mc.ls(sl=1)\n\n    locCtrl = LocatorOnDemand(selObj)\n    ReverseConstraint(selObj, locCtrl)\n\n\ndef LocatorOnDemand(selObj):\n    # Make a locator at selected's position\n    locParent = mc.spaceLocator(n=selObj[0] + \"_Loc_newSpace\")\n\n    parentCon = mc.parentConstraint(selObj, locParent)\n    mc.delete(parentCon)\n\n    # Make Child\n    locCtrl = mc.spaceLocator(n=selObj[0] + \"_Loc_locCtrl\", p=[0, 0, 0])\n    mc.parent(locCtrl, locParent)\n    mc.ResetTransformations(locCtrl)\n\n    return locCtrl\n\n\ndef ReverseConstraint(selObj, locCtrl):\n    # Matching existing anim\n    parentCon = mc.parentConstraint(selObj, locCtrl)\n    myBake(selObj, locCtrl)\n    mc.delete(parentCon)\n\n    # New power constraint\n    newParentCon = mc.parentConstraint(locCtrl, selObj)\n\n\ndef myBake(selObj, bakeObj):\n    # Find first and last keys\n    try:\n        fullKeyList = sorted(mc.keyframe(selObj, q=1))\n        firstLastKeys = fullKeyList[0], fullKeyList[-1]\n        # Bake\n        mc.bakeResults(bakeObj, time=firstLastKeys)\n    except:\n        pass\n\n\nlocTool()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "local loc" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "local_loc" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as mc\n\n\ndef locTool():\n    selObj = mc.ls(sl=1)\n\n    locCtrl = LocatorOnDemand(selObj)\n    ReverseConstraint(selObj, locCtrl)\n\n\ndef LocatorOnDemand(selObj):\n    # Make a locator at selected's position\n    locParent = mc.spaceLocator(n=selObj[0] + \"_Loc_newSpace\")\n\n    parentCon = mc.parentConstraint(selObj, locParent)\n    mc.delete(parentCon)\n\n    # Make Child\n    locCtrl = mc.spaceLocator(n=selObj[0] + \"_Loc_locCtrl\", p=[0, 0, 0])\n    mc.parent(locCtrl, locParent)\n    mc.ResetTransformations(locCtrl)\n\n    return locCtrl\n\n\ndef ReverseConstraint(selObj, locCtrl):\n    # Matching existing anim\n    parentCon = mc.parentConstraint(selObj, locCtrl)\n    myBake(selObj, locCtrl)\n    mc.delete(parentCon)\n\n    # New power constraint\n    newParentCon = mc.parentConstraint(locCtrl, selObj)\n\n\ndef myBake(selObj, bakeObj):\n    # Find first and last keys\n    try:\n        fullKeyList = sorted(mc.keyframe(selObj, q=1))\n        firstLastKeys = fullKeyList[0], fullKeyList[-1]\n        # Bake\n        mc.bakeResults(bakeObj, time=firstLastKeys)\n    except:\n        pass\n\n\nlocTool()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# Extract base animation to new layer\n\nsource_aLyr = mc.treeView('AnimLayerTabanimLayerEditor', q=True, selectItem=True) or []\nif not source_aLyr:\n    source_aLyr = \"BaseAnimation\"\nif type(source_aLyr) == list:\n    source_aLyr = source_aLyr[0]\n\nextract_aLyr = mc.animLayer(\"take_aLyr\", override=1, addSelectedObjects=1, extractAnimation=source_aLyr)\nmc.animLayer(source_aLyr, e=1, copyAnimation=extract_aLyr)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# Extract base animation to new layer\n\nsource_aLyr = mc.treeView..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "extract_lyr" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "alignSurface.png" 
        -image1 "alignSurface.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# Extract base animation to new layer\n\nsource_aLyr = mc.treeView('AnimLayerTabanimLayerEditor', q=True, selectItem=True) or []\nif not source_aLyr:\n    source_aLyr = \"BaseAnimation\"\nif type(source_aLyr) == list:\n    source_aLyr = source_aLyr[0]\n\nextract_aLyr = mc.animLayer(\"take_aLyr\", override=1, addSelectedObjects=1, extractAnimation=source_aLyr)\nmc.animLayer(source_aLyr, e=1, copyAnimation=extract_aLyr)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# Bake From Selected TimeRange  // ToDo: Rename resulting layer\n\nimport maya.cmds as mc\nimport maya.mel as mel\n\n# Get Highlighted Time Range\naTimeSlider = mel.eval('$tmpVar=$gPlayBackSlider')\ntimeRange = mc.timeControl(aTimeSlider, q=True, rangeArray=True)\nstart, end = timeRange[0], timeRange[1]\n\n\n# Check with size of range if there's no highlighted selection\nif start == end-1:\n    mc.confirmDialog(title=\"Warning\", message=\"Make Timeslider Range Selection\")\n    exit()\n    \n    \nsel = mc.ls(sl=1)\n# Find selected animlayer\nsel_animLayer = mc.treeView('AnimLayerTabanimLayerEditor', q=True, selectItem=True)[0]\n\nmc.bakeResults(sel, destinationLayer=1, time=(start, end), bakeOnOverrideLayer=1)\n\n# Delete Constraint\nchild_con = mc.listRelatives(sel, children=1, type='constraint')\nmc.delete(child_con, constraints=1)\n\n# Turn off override layer one frame before and after bake range\nmc.setKeyframe('BakeResults.weight', time=(start-1), value=0)\nmc.setKeyframe('BakeResults.weight', time=start, value=1)\nmc.setKeyframe('BakeResults.weight', time=(end-1), value=1)\nmc.setKeyframe('BakeResults.weight', time=end, value=0)\n\n# Insert protective keys around bake range\nmc.setKeyframe(sel, e=1, insert=1, time=((start-1), end))\n\n# Merge Layers (With Smart Bake because new layer is on 1s)\n# Use selected layer as 'base' to merge down to\nmel.eval('optionVar -intValue animLayerMergeSmartBake 1')\nmel.eval('animLayerMerge {{ \"{0}\",\"BakeResults\" }}'.format(sel_animLayer))\n\n\n# Doesn't work because it runs before baking\n\n#pre_layer_names = mc.treeView('AnimLayerTabanimLayerEditor', q=True, ch=1)\n#post_layer_names = mc.treeView('AnimLayerTabanimLayerEditor', q=True, ch=1)\n#dif = set(pre_layer_names).symmetric_difference(set(post_layer_names))\n#new_layer = list(dif)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# Bake From Selected TimeRange  // ToDo: Rename resulting layer\n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "rgeBk" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "render_setRange.png" 
        -image1 "render_setRange.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# Bake From Selected TimeRange  // ToDo: Rename resulting layer\n\nimport maya.cmds as mc\nimport maya.mel as mel\n\n# Get Highlighted Time Range\naTimeSlider = mel.eval('$tmpVar=$gPlayBackSlider')\ntimeRange = mc.timeControl(aTimeSlider, q=True, rangeArray=True)\nstart, end = timeRange[0], timeRange[1]\n\n\n# Check with size of range if there's no highlighted selection\nif start == end-1:\n    mc.confirmDialog(title=\"Warning\", message=\"Make Timeslider Range Selection\")\n    exit()\n    \n    \nsel = mc.ls(sl=1)\n# Find selected animlayer\nsel_animLayer = mc.treeView('AnimLayerTabanimLayerEditor', q=True, selectItem=True)[0]\n\nmc.bakeResults(sel, destinationLayer=1, time=(start, end), bakeOnOverrideLayer=1)\n\n# Delete Constraint\nchild_con = mc.listRelatives(sel, children=1, type='constraint')\nmc.delete(child_con, constraints=1)\n\n# Turn off override layer one frame before and after bake range\nmc.setKeyframe('BakeResults.weight', time=(start-1), value=0)\nmc.setKeyframe('BakeResults.weight', time=start, value=1)\nmc.setKeyframe('BakeResults.weight', time=(end-1), value=1)\nmc.setKeyframe('BakeResults.weight', time=end, value=0)\n\n# Insert protective keys around bake range\nmc.setKeyframe(sel, e=1, insert=1, time=((start-1), end))\n\n# Merge Layers (With Smart Bake because new layer is on 1s)\n# Use selected layer as 'base' to merge down to\nmel.eval('optionVar -intValue animLayerMergeSmartBake 1')\nmel.eval('animLayerMerge {{ \"{0}\",\"BakeResults\" }}'.format(sel_animLayer))\n\n\n# Doesn't work because it runs before baking\n\n#pre_layer_names = mc.treeView('AnimLayerTabanimLayerEditor', q=True, ch=1)\n#post_layer_names = mc.treeView('AnimLayerTabanimLayerEditor', q=True, ch=1)\n#dif = set(pre_layer_names).symmetric_difference(set(post_layer_names))\n#new_layer = list(dif)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# Merge Layer From Selected TimeRange  // ToDo: Rename resulting layer\n\nimport maya.cmds as mc\nimport maya.mel as mel\n\n# Get Highlighted Time Range\naTimeSlider = mel.eval('$tmpVar=$gPlayBackSlider')\ntimeRange = mc.timeControl(aTimeSlider, q=True, rangeArray=True)\nstart, end = timeRange[0], timeRange[1]\n\n# Check with size of range if there's no highlighted selection\nif start == end-1:\n    mc.confirmDialog(title=\"Warning\", message=\"Make Timeslider Range Selection\")\n    exit()\n    \nsel = mc.ls(sl=1)\n# Find selected animlayer\nsel_animLayer = mc.treeView('AnimLayerTabanimLayerEditor', q=True, selectItem=True)[0]\n\n# 'Bake' on 1s the frame range\nfor i in range(int(start), int(end)):\n    mc.setKeyframe(sel, time=(i, i), insert=1)\n\n# Find layer weights at start and end\nstart_weight = mc.getAttr(sel_animLayer + \".weight\", time=start)\nend_weight = mc.getAttr(sel_animLayer + \".weight\", time=end)\n\n# Turn off override layer one frame before and after bake range\nmc.setKeyframe(sel_animLayer + '.weight', time=(start-1), value=0)\nmc.setKeyframe(sel_animLayer + '.weight', time=start, value=start_weight)\nmc.setKeyframe(sel_animLayer + '.weight', time=(end-1), value=end_weight)\nmc.setKeyframe(sel_animLayer + '.weight', time=end, value=0)\n\n# Insert protective keys around bake range\nmc.setKeyframe(sel, e=1, insert=1, time=((start-1), end))\n\n# Use selected layer as 'base' to merge down to\nmel.eval('optionVar -intValue animLayerMergeSmartBake 1')\nmel.eval('animLayerMerge {{ \"BaseAnimation\",\"{0}\" }}'.format(sel_animLayer))\n\nmc.select(sel)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "sel = mc.ls(sl=1)[0]\nmc.select(sel, replace=1, add=1)\n" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "rgeMrg" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyCollapseEdge.png" 
        -image1 "polyCollapseEdge.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# Merge Layer From Selected TimeRange  // ToDo: Rename resulting layer\n\nimport maya.cmds as mc\nimport maya.mel as mel\n\n# Get Highlighted Time Range\naTimeSlider = mel.eval('$tmpVar=$gPlayBackSlider')\ntimeRange = mc.timeControl(aTimeSlider, q=True, rangeArray=True)\nstart, end = timeRange[0], timeRange[1]\n\n# Check with size of range if there's no highlighted selection\nif start == end-1:\n    mc.confirmDialog(title=\"Warning\", message=\"Make Timeslider Range Selection\")\n    exit()\n    \nsel = mc.ls(sl=1)\n# Find selected animlayer\nsel_animLayer = mc.treeView('AnimLayerTabanimLayerEditor', q=True, selectItem=True)[0]\n\n# 'Bake' on 1s the frame range\nfor i in range(int(start), int(end)):\n    mc.setKeyframe(sel, time=(i, i), insert=1)\n\n# Find layer weights at start and end\nstart_weight = mc.getAttr(sel_animLayer + \".weight\", time=start)\nend_weight = mc.getAttr(sel_animLayer + \".weight\", time=end)\n\n# Turn off override layer one frame before and after bake range\nmc.setKeyframe(sel_animLayer + '.weight', time=(start-1), value=0)\nmc.setKeyframe(sel_animLayer + '.weight', time=start, value=start_weight)\nmc.setKeyframe(sel_animLayer + '.weight', time=(end-1), value=end_weight)\nmc.setKeyframe(sel_animLayer + '.weight', time=end, value=0)\n\n# Insert protective keys around bake range\nmc.setKeyframe(sel, e=1, insert=1, time=((start-1), end))\n\n# Use selected layer as 'base' to merge down to\nmel.eval('optionVar -intValue animLayerMergeSmartBake 1')\nmel.eval('animLayerMerge {{ \"BaseAnimation\",\"{0}\" }}'.format(sel_animLayer))\n\nmc.select(sel)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import bake_to_layer" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import bake_to_layer" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "bk2lyr" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polyBakeSetAssign.png" 
        -image1 "polyBakeSetAssign.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# Sometimes when baking a certain frame range Maya will delete the existing out-of-range keys.\n# This script extracts the existing animation first to protect it.\n\nimport maya.cmds as mc\n\nsel = mc.ls(sl=1)\nanimLayer_name = sel[0] + \"_base\"\n\nminTime = mc.playbackOptions(q=1, minTime=1)\nmaxTime = mc.playbackOptions(q=1, maxTime=1)\ntime_range = minTime, maxTime\n\n# Extract base animation to new layer\nextract_lyr = mc.animLayer(animLayer_name, override=1, addSelectedObjects=1, extractAnimation=\"BaseAnimation\")\n\nmc.bakeResults(sel, time=time_range, bakeOnOverrideLayer=True, preserveOutsideKeys=True)\nbake_container = mc.ls(sl=1, type=\"container\")[0]\n\nif mc.animLayer(sel, q=1, affectedLayers=1) and mc.animLayer('BakeResults', q=1, exists=1):\n    mc.rename('BakeResults', sel[0] + \"_bk_lyr\")\n\n# Copy anim back to Base layer and delete\nmc.animLayer('BaseAnimation', e=1, copyAnimation=extract_lyr)\nmc.delete(extract_lyr)    \n\n# Delete Asset Container (made from baking)\nmc.select(bake_container)\nmc.DeleteSelectedContainers()\n\nmc.delete(sel, constraints=True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import copy_to_layer" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import copy_to_layer" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "cpy2lyr" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "render_layeredTexture.png" 
        -image1 "render_layeredTexture.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import copy_to_layer" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from Marking_Menu import j_mm\nreload(j_mm)\nj_mm.Menu()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Jono marking menu" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "J_mm" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconFilterTypes.png" 
        -image1 "menuIconFilterTypes.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from Marking_Menu import j_mm\nreload(j_mm)\nj_mm.Menu()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Script Editor: Enter Maya Embedded Language (MEL) commands" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Script Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "cmdWndIcon.png" 
        -image1 "cmdWndIcon.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ScriptEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create, edit and save hotkeys" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hotkey Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "HE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "HotkeyPreferencesWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Save" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Save" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_saveFile.png" 
        -image1 "shelf_saveFile.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import scanlineAPI\nscanlineAPI.saveCurrentScene(False)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Save with comment" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Save with comment" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_saveFileComment.png" 
        -image1 "shelf_saveFileComment.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import scanlineAPI\nscanlineAPI.saveCurrentScene(True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Publish current scene" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Publish current scene" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_publish.png" 
        -image1 "shelf_publish.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import scanlineNodes\nscanlineNodes.quickPublish(bComment=True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Scene Manager" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Scene Manager" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_sceneManager.png" 
        -image1 "shelf_sceneManager.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sceneManager\nsceneManager.launch()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Workspace Dialog" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Workspace Dialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_workspace.png" 
        -image1 "shelf_workspace.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import workspaceDialog\nworkspaceDialog.launch()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Bake simulation options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "bakeSimulationDialogItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Bso" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "BakeSimulationOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 1
        -flexibleWidthValue 32
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "addShelfSeparator()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "sep" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "sep" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "addShelfSeparator()" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 34
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "AnimBot Toggle" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "AnimBot Toggle" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_animBot.png" 
        -image1 "shelf_animBot.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from animation.AnimBot.animBot_2_3_8 import animBot\nfrom scl.pipeline import scLog\n\nLOGGER = scLog.create(__name__)\n\n\ndef command():\n    LOGGER.info(\"Initializing AnimBot Plugin Toolset...\")\n    try:\n        animBot.toggle()\n    except Exception as e:\n        LOGGER.debug(e)\n        LOGGER.error(\"Failed to Launch/Toggle AnimBot Plugin Toolset.\")\n\n\ncommand()\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Launch AnimBot PluginToolset." ( "from animation.AnimBot.animBot_2_3_8 import animBot\nfrom scl.pipeline import scLog\n\nLOGGER = scLog.create(__name__)\n\n\ndef command_1():\n    LOGGER.info(\"Launching AnimBot Plugin Toolset...\")\n    try:\n        animBot.launch()\n    except Exception as e:\n        LOGGER.debug(e)\n        LOGGER.error(\"Failed to Launch AnimBot Plugin Toolset.\")\n\n\ncommand_1()\n" )
        -mip 0
        -mi "Unload AnimBot Plugin Toolset." ( "from animation.AnimBot.animBot_2_3_8 import animBot\nfrom scl.pipeline import scLog\n\nLOGGER = scLog.create(__name__)\n\n\ndef command_2():\n    LOGGER.info(\"Unloading AnimBot Plugin Toolset...\")\n    try:\n        animBot.unload()\n    except Exception as e:\n        LOGGER.debug(e)\n        LOGGER.error(\"Failed to Unload AnimBot Plugin Toolset.\")\n\n\ncommand_2()\n" )
        -mip 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "reload(temp_timed_constraints)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "reload(temp_timed_constraints)" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "reload(temp_timed_constraints)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "reload(ui_premades)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "reload(ui_premades)" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "reload(ui_premades)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 39
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_name = \"ctrl_m_headFkSub\"\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n    ctrl_list.append(name_space + ctrl_name)\n\n\n    \npm.select(ctrl_list)\n    " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "HIKCharacterToolFullBody_100.png" 
        -image1 "HIKCharacterToolFullBody_100.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\nraw_names = [u'ctrl_l_backToeAFkSimpleDigitC', u'ctrl_l_backToeAFkSimpleDigitB', u'ctrl_l_backToeAFkSimpleDigitA',\n             u'ctrl_r_frontToeDFkSimpleDigitC', u'ctrl_r_frontToeDFkSimpleDigitB',\n             u'ctrl_r_frontToeDFkSimpleDigitA', u'ctrl_r_backToeAFkSimpleDigitA', u'ctrl_l_frontLegIkLegSocket',\n             u'ctrl_r_backToeAFkSimpleDigitC', u'ctrl_r_backToeAFkSimpleDigitB',\n             u'ctrl_l_frontLegIkScapula', u'ctrl_r_shoulder', u'ctrl_l_backLegIkLegSocket',\n             u'ctrl_r_frontToeAFkSimpleDigitB', u'ctrl_r_frontToeAFkSimpleDigitC', u'ctrl_r_frontToeAFkSimpleDigitA',\n             u'ctrl_r_backLegIkEndOfToe', u'ctrl_r_backLegIkAnkle', u'ctrl_l_frontToeDFkSimpleDigitA',\n             u'ctrl_r_backLegIkLegSocket', u'ctrl_l_frontToeDFkSimpleDigitC', u'ctrl_l_frontToeDFkSimpleDigitB',\n             u'ctrl_l_backToeBFkSimpleMetaCarpal', u'ctrl_r_frontLegIkEndOfToe', u'ctrl_r_backLegIkHeel',\n             u'ctrl_m_spineIkChest', u'ctrl_m_tongueFkSplineD', u'ctrl_m_tongueFkSplineG',\n             u'ctrl_m_tongueFkSplineF', u'ctrl_m_tongueFkSplineA', u'ctrl_l_frontToeDFkSimpleMetaCarpal',\n             u'ctrl_m_tongueFkSplineC', u'ctrl_m_tongueFkSplineB', u'ctrl_r_frontToeDFkSimpleMetaCarpal',\n             u'ctrl_l_backLegIkEndOfToe', u'ctrl_l_backLegIkHeel', u'ctrl_l_frontLegIkIkPoleVector',\n             u'ctrl_r_backToeAFkSimpleMetaCarpal', u'ctrl_m_cogFk', u'ctrl_r_backLegIkPoleVector',\n             u'ctrl_l_backLegIkAnkle', u'ctrl_r_frontLegIkLegSocket', u'ctrl_l_frontToeAFkSimpleMetaCarpal',\n             u'ctrl_r_backLegIkInnerFoot', u'ctrl_m_sternumFk', u'ctrl_l_frontLegIkBallOfFoot',\n             u'ctrl_l_frontLegIkToes', u'ctrl_l_backLegIkOuterFoot', u'ctrl_l_backLegIkBallOfFoot',\n             u'ctrl_l_frontToeAFkSimpleDigitB', u'ctrl_l_frontToeAFkSimpleDigitC', u'ctrl_l_backToeCFkSimpleDigitA',\n             u'ctrl_l_backToeCFkSimpleDigitC', u'ctrl_l_backToeCFkSimpleDigitB', u'ctrl_l_backLegIkInnerFoot',\n             u'ctrl_l_eyeFk', u'ctrl_r_frontLegIkInnerFoot', u'ctrl_l_frontLegIkHeel', u'ctrl_m_headFk',\n             u'ctrl_l_frontLegIkAnkle', u'ctrl_r_backLegIkOuterFoot', u'ctrl_l_frontToeCFkSimpleMetaCarpal',\n             u'ctrl_l_backLegIkPoleVector', u'ctrl_m_neckIkSplineD', u'ctrl_m_neckIkSplineC',\n             u'ctrl_m_neckIkSplineB', u'ctrl_r_frontLegIkFoot', u'ctrl_l_backToeBFkSimpleDigitA',\n             u'ctrl_l_backToeBFkSimpleDigitB', u'ctrl_l_backToeBFkSimpleDigitC', u'ctrl_r_frontLegIkAnkle',\n             u'ctrl_r_frontLegIkToes', u'ctrl_m_neckIkSplineTip', u'tail_switches', u'ctrl_l_frontLegIkClavicle',\n             u'ctrl_l_shoulder', u'ctrl_r_eyeFk', u'ctrl_l_frontLegIkFoot',\n             u'ctrl_l_frontToeBFkSimpleMetaCarpal', u'ctrl_r_backToeBFkSimpleDigitA', u'ctrl_l_frontToeBFkSimpleDigitC',\n             u'ctrl_l_frontToeBFkSimpleDigitB', u'ctrl_l_frontToeBFkSimpleDigitA',\n             u'ctrl_l_backLegIkToes', u'ctrl_l_backLegIkFoot', u'ctrl_r_backLegIkFoot',\n             u'ctrl_r_frontToeBFkSimpleMetaCarpal', u'ctrl_r_frontLegIkIkPoleVector', u'ctrl_r_backLegIkToes',\n             u'ctrl_r_backLegIkBallOfFoot', u'ctrl_m_tongueFkSplineE', u'ctrl_r_backToeBFkSimpleDigitB',\n             u'ctrl_r_backToeBFkSimpleDigitC', u'ctrl_m_jaw', u'ctrl_r_frontLegIkScapula',\n             u'ctrl_l_backToeAFkSimpleMetaCarpal', u'ctrl_m_tailFkSplineA', u'ctrl_m_tailFkSplineC',\n             u'ctrl_m_tailFkSplineB', u'ctrl_m_tailFkSplineE', u'ctrl_m_tailFkSplineD', u'ctrl_m_tailFkSplineG',\n             u'ctrl_m_tailFkSplineF', u'ctrl_l_backToeCFkSimpleMetaCarpal', u'ctrl_l_frontLegIkInnerFoot',\n             u'ctrl_r_frontToeBFkSimpleDigitA', u'ctrl_r_frontToeBFkSimpleDigitC',\n             u'ctrl_r_frontToeBFkSimpleDigitB', u'ctrl_r_frontToeCFkSimpleDigitA', u'ctrl_r_frontToeCFkSimpleDigitB',\n             u'ctrl_r_frontToeCFkSimpleDigitC', u'ctrl_r_frontLegIkHeel',\n             u'ctrl_l_frontToeCFkSimpleDigitB', u'ctrl_l_frontToeCFkSimpleDigitC', u'ctrl_l_frontToeCFkSimpleDigitA',\n             u'ctrl_r_frontToeAFkSimpleMetaCarpal', u'ctrl_l_frontLegIkOuterFoot',\n             u'ctrl_r_frontLegIkOuterFoot', u'ctrl_r_frontLegIkBallOfFoot', u'ctrl_r_backToeCFkSimpleMetaCarpal',\n             u'ctrl_l_frontLegIkEndOfToe', u'ctrl_r_frontLegIkClavicle', u'ctrl_m_spineIkHips',\n             u'ctrl_r_backToeBFkSimpleMetaCarpal', u'ctrl_r_frontToeCFkSimpleMetaCarpal',\n             u'ctrl_l_frontToeAFkSimpleDigitA', u'ctrl_r_backToeCFkSimpleDigitC', u'ctrl_r_backToeCFkSimpleDigitB',\n             u'ctrl_r_backToeCFkSimpleDigitA']\n\ncurrent_sel = pm.ls(sl=1)[0]\n\nname_space = current_sel.namespace()\nselection = [name_space + ctrl for ctrl in raw_names]\n\npm.select(selection, replace=1)\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 39
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_name = \"ctrl_m_spineIkChestSub\"\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n    ctrl_list.append(name_space + ctrl_name)\n\n\n    \npm.select(ctrl_list)\n    " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "advancedSettings_100.png" 
        -image1 "advancedSettings_100.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_name = \"ctrl_m_spineIkChestSub\"\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n    ctrl_list.append(name_space + ctrl_name)\n\n\n    \npm.select(ctrl_list)\n    " 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_name = \"ctrl_m_world\"\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n    ctrl_list.append(name_space + ctrl_name)\n\n\n    \npm.select(ctrl_list)\n    " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_n..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "circle.png" 
        -image1 "circle.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nimport random\n\ndogs = pm.ls(sl=1)\nctrl_name = \"ctrl_m_world\"\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n    ctrl_list.append(name_space + ctrl_name)\n\n\n    \npm.select(ctrl_list)\n    " 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Studio Library" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Studio Library" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "shelf_studiolibrary.png" 
        -image1 "shelf_studiolibrary.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# -----------------------------------\n# Studio Library\n# www.studiolibrary.com\n# -----------------------------------\n\n\ndef setupStudioLibaryPath():\n    import os\n    import sys\n    from scl.pipeline import Paths\n\n    root = Paths.softwareRoot()\n    path = (r'managed\\SoftwareConfiguration\\mayaShared\\env\\configs'\n            r'\\default\\modules\\anim_studiolibrary\\src')\n    studiolibrary_path = os.path.join(root, path)\n    if not os.path.exists(studiolibrary_path):\n        raise IOError(r'The source path \"{}\" does not exist!'.format(studiolibrary_path))\n\n    if studiolibrary_path not in sys.path:\n        sys.path.insert(0, studiolibrary_path)\n\n\nsetupStudioLibaryPath()\n\n\nimport studiolibrary\nstudiolibrary.main()\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\n\ndogs = pm.ls(sl=1)\nraw_ctrl_sel = [u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineA',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineB',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineC',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineD',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineE',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineF',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineG']\n\nctrl_set = [x.rpartition(':')[-1] for x in raw_ctrl_sel]\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n\n    for ctrl_name in ctrl_set:\n        ctrl_list.append(name_space + ctrl_name)\n\npm.select(ctrl_list)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import pymel.core as pm\n\ndogs = pm.ls(sl=1)\nraw_ctrl_sel = [u'ch..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\ndogs = pm.ls(sl=1)\nraw_ctrl_sel = [u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineA',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineB',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineC',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineD',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineE',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineF',\n u'chrWartDog01A_16016_1:ctrl_m_tailFkSplineG']\n\nctrl_set = [x.rpartition(':')[-1] for x in raw_ctrl_sel]\nctrl_list = []\n\nfor dog in dogs:\n    name_space = dog.namespace()\n\n    for ctrl_name in ctrl_set:\n        ctrl_list.append(name_space + ctrl_name)\n\npm.select(ctrl_list)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
